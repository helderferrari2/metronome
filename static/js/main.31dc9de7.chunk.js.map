{"version":3,"sources":["assets/high.wav","assets/low.wav","components/Metronome.js","App.js","index.js"],"names":["Metronome","useState","bpm","setBpm","playing","setPlaying","timer","setTimer","claps","highNote","Audio","high","lowNote","low","count","play","resetTimer","clearInterval","className","type","min","max","value","onChange","e","target","onClick","setInterval","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qLAAe,G,MAAA,IAA0B,kCCA1B,MAA0B,gC,OCgF1BA,EA1EG,WAAO,IAAD,EACAC,mBAAS,KADT,mBACfC,EADe,KACVC,EADU,OAEQF,oBAAS,GAFjB,mBAEfG,EAFe,KAENC,EAFM,OAGIJ,mBAAS,GAHb,mBAGfK,EAHe,KAGRC,EAHQ,KAKhBC,EAAQ,CACZC,SAAU,IAAIC,MAAMC,GACpBC,QAAS,IAAIF,MAAMG,IAIjBC,EAAQ,EAoBZ,SAASC,IACHD,EAtBO,IAsBU,EACnBN,EAAMC,SAASM,OAEfP,EAAMI,QAAQG,OAEhBD,GAAiB,EAGnB,SAASE,IACPC,cAAcX,GACdC,EAAS,GAGX,OACE,qBAAKW,UAAU,UAAf,SACE,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,oBAAf,UACE,6BAAKhB,IACL,wCAGF,sBAAKgB,UAAU,mBAAf,UACE,qCACA,uBACEC,KAAK,QACLD,UAAU,SACVE,IAAK,GACLC,IAAK,IACLC,MAAOpB,EACPqB,SAhDV,SAAyBC,GACnBpB,IACFC,GAAYD,GACZY,KAEFb,EAAOqB,EAAEC,OAAOH,UA6CV,wCAGF,qBAAKJ,UAAU,qBAAqBQ,QA7C1C,WACErB,GAAYD,GACPA,EAIHY,KAHAT,EAASoB,YAAYZ,EAAO,GAAKb,EAAO,MACxCY,EAAQ,IAyCN,SACGV,EAAU,cAAC,IAAD,IAAe,cAAC,IAAD,YC9DrBwB,EARH,WACV,OACE,qBAAKV,UAAU,MAAf,SACE,cAAC,EAAD,OCDNW,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.31dc9de7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/high.ebce4639.wav\";","export default __webpack_public_path__ + \"static/media/low.d966949b.wav\";","import React, { useState } from \"react\";\r\nimport \"./metronome.css\";\r\nimport high from \"../assets/high.wav\";\r\nimport low from \"../assets/low.wav\";\r\nimport { FiPlay, FiSquare } from \"react-icons/fi\";\r\n\r\nconst Metronome = () => {\r\n  const [bpm, setBpm] = useState(100);\r\n  const [playing, setPlaying] = useState(false);\r\n  const [timer, setTimer] = useState(0);\r\n\r\n  const claps = {\r\n    highNote: new Audio(high),\r\n    lowNote: new Audio(low),\r\n  };\r\n\r\n  const beat = 4;\r\n  let count = 0;\r\n\r\n  function handleBpmChange(e) {\r\n    if (playing) {\r\n      setPlaying(!playing);\r\n      resetTimer();\r\n    }\r\n    setBpm(e.target.value);\r\n  }\r\n\r\n  function handleStartStop() {\r\n    setPlaying(!playing);\r\n    if (!playing) {\r\n      setTimer(setInterval(play, (60 / bpm) * 1000));\r\n      count = 0;\r\n    } else {\r\n      resetTimer();\r\n    }\r\n  }\r\n\r\n  function play() {\r\n    if (count % beat === 0) {\r\n      claps.highNote.play();\r\n    } else {\r\n      claps.lowNote.play();\r\n    }\r\n    count = count + (1 % beat);\r\n  }\r\n\r\n  function resetTimer() {\r\n    clearInterval(timer);\r\n    setTimer(0);\r\n  }\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <div className=\"metronome\">\r\n        <div className=\"metronome-display\">\r\n          <h1>{bpm}</h1>\r\n          <h3>BPM</h3>\r\n        </div>\r\n\r\n        <div className=\"metronome-slider\">\r\n          <span>-</span>\r\n          <input\r\n            type=\"range\"\r\n            className=\"slider\"\r\n            min={40}\r\n            max={200}\r\n            value={bpm}\r\n            onChange={handleBpmChange}\r\n          />\r\n          <span>+</span>\r\n        </div>\r\n\r\n        <div className=\"metronome-controls\" onClick={handleStartStop}>\r\n          {playing ? <FiSquare /> : <FiPlay />}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Metronome;\r\n","import React from \"react\";\nimport Metronome from \"./components/Metronome\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Metronome></Metronome>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}